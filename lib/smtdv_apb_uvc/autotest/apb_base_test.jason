{
    'test': {
        'core': {
            'name': 'apb_base_test',
            }
        },
        'parameter: {
            'ADDR_WIDTH': 32,
            'DATA_WIDTH': 32
        },
    'cmp_envs': {[
        {
            'uuid': 0,
            'type': 'apb',
            'parameter': {
                'ADDR_WIDTH': ${test.parameter.ADDR_WIDTH},
                'DATA_WIDTH': ${test.parameter.DATA_WIDTH}
            },

            'graph': {
                'type': 'cmp_graph',
                'nodes': {[
                    {
                        'uuid': 0,
                        'model': 'master', // {master, slave, scoreboard, vseqr}
                        'override_class': 'test', // extend apb_master_agent#(ADDR_WIDTH, DATA_WIDTH)
                        'bind_inst': 'xxx.xxx.xxx',
                        'interface': {
                            'clk': ('clk', ${cmp_envs[0].graph.nodes[0].bind_inst}.clk),
                            'rst': ('resetn', ${cmp_envs[0].bind_inst}.resetn),
                            'output':{[
                                ('paddr', ${cmp_envs[0].bind_inst}.paddr),
                                ('prwd', ${cmp_envs[0].bind_inst}.prwd),
                                ('pwdata', ${cmp_envs[0].bind_inst}.pwdata),
                                ('psel', {15'h0, ${cmp_envs[0].bind_inst}.psel}),
                                ('penable', ${cmp_envs[0].bind_inst}.penable)
                            ]},
                            'input':{[
                                ('prdata', ${cmp_envs[0].bind_inst}.prdata),
                                ('pslverr', ${cmp_envs[0].bind_inst}.pslverr),
                                ('pready', ${cmp_envs[0].bind_inst}.pready)
                            ]}
                        },
                        'cfg': { // apb_master_cfg
                            'has_force': TRUE,
                            'has_coverage': TRUE,
                            'has_export': TRUE,
                            'has_error': TRUE,
                            'add_slave': {[
                                {
                                    'uuid': 0,
                                    'start_addr': 0,
                                    'end_addr': 0x7fffffff,
                                    'slave_cfg': &{cmp_envs[0].graph.nodes[1].cfg}
                                },
                                {
                                    'uuid': 1,
                                    'start_addr':800000000,
                                    'end_addr': 0xffffffff,
                                    'slave_cfg': &{cmp_envs[0].graph.nodes[2].cfg}
                                }
                            ]},
                        }
                    },
                    {
                        'uuid': 1,
                        'model': 'slave',
                        'override_class': 'test',
                        'parameter': {
                            'ADDR_WIDTH': ${test.parameter.ADDR_WIDTH},
                            'DATA_WIDTH': ${test.parameter.DATA_WIDTH}
                        },
                        'bind_inst': 'xxx.xxx.xxx',
                        'interface': {
                            'clk': ('clk', ${cmp_envs[0].graph.nodes[1].bind_inst}.clk),
                            'resetn': ('resetn', ${cmp_envs[0].graph.nodes[1].bind_inst}.resetn),
                            'output':{[
                                ('clk', ${cmp_envs[0].graph.nodes[1].bind_inst}.clk),
                                ('resetn', ${cmp_envs[0].graph.nodes[1].bind_inst}.resetn),
                                ('prdata', ${cmp_envs[0].graph.nodes[1].bind_inst}.prdata),
                                ('pslverr', ${cmp_envs[0].graph.nodes[1].bind_inst}.pslverr),
                                ('pready', ${cmp_envs[0].graph.nodes[1].bind_inst}.pready)
                            ]},
                            'input':{[
                                ('paddr', ${cmp_envs[0].graph.nodes[1].bind_inst}.paddr)
                            ]}
                        },
                        'cfg': {

                        }
                    },
                ]},
                'edges': {[
                    {
                        'uuid': 0,
                        'model': 'master2slave', // {master2slave, slave2master}
                        'override_class': 'test',
                        'parameter': {
                            'ADDR_WIDTH': ${test.parameter.ADDR_WIDTH},
                            'DATA_WIDTH': ${test.parameter.DATA_WIDTH},
                            'T1':
                        },
                        'SOURCE': ${}
                        'SINK': ${}
                    },
                    {
                        'uuid': 1,
                    }
                ]}
            'vseq': {
                'call': apb_master_test_vseq#(ADDR_WIDTH, DATA_WIDTH),
                'graph': {[
                    {
                        'uuid': 0,
                        'seq': {
                            'name': apb_master_stl_seq#(ADDR_WIDTH, DATA_WIDTH)
                        'stl': 'fwset.stl',
                        'pre': {[]},
                        'nxt': {[
                            ${cmp_envs[0].vseq.graph[1]}
                        ]}
                    },
                    {
                        'uuid': 1,
                        'seq': apb_master_stl_seq#(ADDR_WIDTH, DATA_WIDTH)
                        'stl': 'preload0.stl',
                        'pre':{[
                            ${cmp_envs[0].vseq.graph[0]}
                        ]},
                        'nxt': {[]}
                    }
                ]}
        },
        {
}
